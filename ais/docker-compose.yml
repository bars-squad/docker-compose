version: "3.8"

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - ais_network
    volumes:
      - ./data/zookeeper:/var/lib/zookeeper/data
      - ./log/zookeeper:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Instructs Kafka how to get in touch with ZooKeeper
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092 # Describes how the host name that is advertised and can be reached by clients. The value is published to ZooKeeper for clients to use. The KAFKA_ADVERTISED_LISTENERS variable is set to localhost:29092. This makes Kafka accessible from outside the container by advertising its location on the Docker host.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ais_network
    volumes:
      - ./data/kafka:/var/lib/kafka/data

  kafka-connect:
    container_name: kafka-connect
    image: confluentinc/cp-kafka-connect
    depends_on:
      - zookeeper
      - kafka
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092 # A host:port pair for establishing the initial connection to the Kafka cluster. Multiple bootstrap servers can be used in the form host1:port1,host2:port2,host3:port3....
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost" # The hostname that is given out to other workers to connect to. In a Docker environment, your clients must be able to connect to the Connect and other services. Advertised hostname is how Connect gives out a hostname that can be reached by the client.
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "ais" # A unique string that identifies the Connect cluster group this worker belongs to.
      CONNECT_CONFIG_STORAGE_TOPIC: "ais-config" # The name of the topic in which to store connector and task configuration data. This must be the same for all workers with the same group.id
      CONNECT_OFFSET_STORAGE_TOPIC: "ais-offsets" # The name of the topic in which to store offset data for connectors. This must be the same for all workers with the same group.id
      CONNECT_STATUS_STORAGE_TOPIC: "ais-status" # The name of the topic in which to store state for connectors. This must be the same for all workers with the same group.id
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" # Converter class for keys. This controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors.
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" # Converter class for values. This controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors.
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: /config/connect # The location from which to load Connect plugins in class loading isolation. If using the confluent-hub client, include /usr/share/confluent-hub-components, the default path that confluent-hub installs to.
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
    networks:
      - ais_network
    volumes:
      - type: bind
        source: ./config/kafka/connect
        target: /config/connect

  redis:
    container_name: redis-local
    image: redis
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - 6379:6379
    networks:
      - ais_network
    volumes:
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf

  mongo:
    container_name: mongo
    image: mongo:5.0.0-rc1-focal
    command: mongod --replSet mongo-replica-set
    ports:
      - 37017:27017
    networks:
      - ais_network
    volumes:
      - ./data/mongodb:/data/db
      - ./log/mongodb:/var/log/mongodb

  mongo1:
    container_name: mongo1
    image: mongo:5.0.0-rc1-focal
    ports:
      - 37018:27017
    command: mongod --replSet mongo-replica-set
    networks:
      - ais_network
    depends_on:
      - mongo
    volumes:
      - ./data/mongodb1:/data/db
      - ./log/mongodb1:/var/log/mongodb

  mongo2:
    container_name: mongo2
    image: mongo:5.0.0-rc1-focal
    ports:
      - 37019:27017
    command: mongod --replSet mongo-replica-set
    networks:
      - ais_network
    depends_on:
      - mongo
    volumes:
      - ./data/mongodb2:/data/db
      - ./log/mongodb2:/var/log/mongodb

  administrator_api:
    container_name: administrator_api
    image: difaal21/administrator_api
    build: .
    ports:
      - 5000:5000
    depends_on:
      - redis
    networks:
      - ais_network
    environment:
      - HOST_USER_COMMAND=http://user_command:5002
      - PORT=5000
      - BASIC_AUTH_USERNAME=root
      - BASIC_AUTH_PASSWORD=root
      - BASIC_AUTH_USERNAME_PERSISTENCE=root-persistence
      - BASIC_AUTH_PASSWORD_PERSISTENCE=root-persistence
      - PUBLIC_KEY_PATH=public.pem
      - PRIVATE_KEY_PATH=private.pem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
    command: pnpm start
    stdin_open: true
    tty: true

  user_command:
    container_name: user_command
    image: difaal21/user_command
    build: .
    ports:
      - 5002:5002
    depends_on:
      - redis
      - administrator_api
      - mongo
    networks:
      - ais_network
    environment:
      - APP_NAME=go-template
      - PORT=5002
      - BASIC_AUTH_USERNAME=root-persistence
      - BASIC_AUTH_PASSWORD=root-persistence
      - MONGODB_URL=mongodb://mongo:27017/ais-user
      - MONGODB_DATABASE=ais-user
      - MONGODB_MIN_POOL_SIZE=50
      - MONGODB_MAX_POOL_SIZE=100
      - MONGODB_MAX_IDLE_CONNECTION_TIME_MS=10000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DATABASE=
      - REDIS_USERNAME=
      - REDIS_PASSWORD=
      - REDIS_SSL_ENABLE=
    command: ./main
    stdin_open: true
    tty: true

networks:
  ais_network:
    name: ais_network
    driver: bridge

volumes:
  data:
    external: true
